

///    LINGUAGGIO PHP    ///

/// RICORDATI SEMPRE IL ; ALLA FINE DI OGNI RIGA DI COMANDO///

%%%%%%%%%%%%%%%%            STRINGHE            %%%%%%%%%%%%%%%%%%

/// echo trim ---- Da utilizzare nei form (NON OBBLIGATORIO MA MOLTO CONSIGLIATO) 
per evitare spazi bianchi durante l'inserimento dell'utente di credenziali>  /// ($stringa)

/// strleng ---- indica la lunghezza di una stringa /// ($stringa)

/// strtolower ---- converte automaticamente una stringa in minuscolo /// ($stringa)

/// strtoupper ---- converte automaticamente una stringa in maiuscolo /// ($stringa)

/// str_word_count ---  conta tutte le parole presenti in una stringa ///($stringa)

/// strrev  ---  scrive una stringa al contrario /// ($stringa)

/// strpos --- Cerca la posizione di una parola all'interno di una stringa /// ($stringa, $parola)

/// str_replace --- sostituisce parti di testo in una stringa /// ($nuovafrase, $vecchiafrase , $stringa)

/// substr --- Prende solo una parte di stringa da noi indicata /// ($stringa, $inizio (in numeri), $lunghezza)

///<br> (HTML) per andare a capo ///

%%%%%%%%%%%%%%%%            NUMERI            %%%%%%%%%%%%%%%%%%

/// Castare (cast) un numero significa cambiare la tipologia di dato es. da string a int ecc.. /// $variabile = '10' scritto normale,
 la variabile sara di tipo string. Invece $variabile = (int)'10' la variabile sara castata e quindi di tipo int

 /// abs() prende il valore assoluto di un numero ///

 /// max, min prendono il numero massimo e il numero minimo dove specificato /// echo max/min(10,20,30,40,50,78)

 /// sqr invece fa la radice quadrata di un numero/// sqr(25)

 /// round invece andra a fare l'arrotondamento di un numero/// round(0.49)

 /// rand ci genera un numero casuale all'interno dell'intervallo che scegliamo//// $variabile =  rand(0,100)

 /// vari operatori matematici: + , - , * , / , % (resto della divisione), **(elevamento a potenza) ///
 
 /// operatori di assegnazione (svolgono l'operazione matematica e successivamente assegnano il valore) :  += , -= , /= , *= /// ($variabile += 5);

 /// Operattore di incremento e decremento /// $variabile++;



%%%%%%%%%%%%                ARRAY             %%%%%%%%%%%%%%


//// Creazione array : $nome = ['elemento1', 'elemento2' , 'elemento3']  ////

///count viene utilizzato per contare gli elementi di un array /// count($nomearray);

/// Array associativi consistono nell'assegnare un titolo/indirizzo a ogni posizione...(rimane comunque un array classico)
   esempio:  $nomearray = [
                                'nome' => 'Luca',
                                'cognome' => 'Pulici',
                                'eta' => 25
                        ];                              /////// echo $nomearray['nome'] per visualizzare l'elemento /////

//// Per visualizzare l'array associativo all'interno di un ciclo e' necessario utilizzare foreach //// foreach ($nomearray as $chiave => $valore) {
                                                                                                                                      echo $chiave . " => " . $valore;
                                                                                                                                     }

                                                                                                                                     
//// Array multidimensionali (array che contengono altri array) //// $nomerray = [
                                                                        ['Paolo', 'Rossi', '24']
                                                                        ['Daniele', 'Tano', '16']
                                                                        ['Valeria', 'Tripodi', '46']
                                                                                ]

//// Visualizzazione array multidimensionali //// echo $nomearray[0][2] %0 indica la posizione del primo array quindi Paolo Rossi 24, 2 invece indica l'elemento del primo array in questo caso 24 %                                                                                

//// Per visualizzare l'array multidimensionale all'interno di un ciclo e' necessario utilizzare due for innestati, 
cioe' un for che passa in rassegna tutti gli array e uno che passa in rassegna ogni elemento degli array/// for($identita=0; $identita < count($nomearray); $identita++){
                                                                                                          echo 'identita:  ' . $identita . '<br>' ;
                                                                                                          for ($persona=0; persona < count($nomearray[$identita]); $persona++){
                                                                                                                echo $nomearray[$identita][$persona] . '<br>';
                                                                                                                                                                  }                                                       
                                                                                                                                                                        }     
                                                                                                                                                                        
//// Per ordinare un array normale bisogna usare sort per ordinare in modo crescente e rsort in modo decrescente (attenzione usando sort e rsort cambiano anche le posizioni e gli indici) ////

//// Per ordinare un array associativo in base alla chiave bisogna usare ksort e krsort //// ksort($nomearrayassociativo) 

//// Per ordinare un array associativo in base al valore bisogna usare asort e arsort //// asort($nomearrayassociativo) 

//// Per aggiungere elementi agli array si usa array_push($nomearray, 'nomeelementodaaggiungere') e viene aggiunto alla fine dell'array ////

//// Per togliere l'ultimo elemento in un array si usa array_pop ($nomearray) ////

//// Per aggiungere elementi agli array si usa array_unshift($nomearray, 'nomeelementodaaggiungere') e viene aggiunto all inizio dell'array spingendo di una posizione tutti gli elementi ////

//// Per togliere il primo elemento in un array si usa array_shift ($nomearray) ////



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%           CONDIZIONI IF - ELSE          %%%%%%%%%%%%%%%%%%%%%%%%%%%%


//// Per aggiungere delle condizioni si utilizza if e else
 (if viene utilizzata per la condizione, else significa "altrimenti" quindi se la condizione non viene soddisfatta) ////  
                                                                  if(condizione) {
                                                                                    esempio: echo "Condizione verificata";
                                                                                } 
                                                                  else        {
                                                                                    esempio: echo "condizione non verificata";
                                                                              }

//// per utilizzare piu' condizioni si utilizza else if /////
                                                if(condizione) {
                                                      esempio: echo "Condizione verificata";
                                                } 
                                                else if (seconda condizione) {
                                                      esempio: echo "seconda condizione verificata";
                                                }
                                                else {
                                                      esempio: echo "nessuna condizione precedente verificata";
                                                }

/// Operatori di comparazione da utilizzare nelle condizioni:   ==  , < , > , => , <= , != , === , !=== ////

/// Operatori logici per poter inserire piu' condizioni all'interno dello stesso if : AND(&&) , OR(||) , NOT(!) //// 
if ($numerodiesempio > 10 && $numerodiesempio < 20) % AND %
if ($numerodiesempio > 10 || $numerodiesempio < 20) % OR %
if (!($numerodiesempio == 7)) % NOT % in questo caso per soddisfare la condizione il numero deve essere diverso da 7;

///Oltre alle condizioni possiamo utilizzare i casi con switch...cioe noi creiamo delle casistiche, se vengono confermate viene elaborato il codice altrimenti no ////
            switch ($numerodiesempio){
                  case 1:
                  echo "il numero inserito e' il numero 1";
                  break;
                  case 2:
                  echo "il numero inserito e' il numero 2";
                  break;
                  case 3:
                  echo "il numero inserito e' il numero 3";
                  break;
                  default:
                  echo "messaggio visualizzato quando nessun caso e' verificato;
            }



%%%%%%%%%%%%%%%%%%%%%%%%%%        CICLO FOR - FOREACH - WHILE - DO WHILE        %%%%%%%%%%%%%%%%%%%%%%%%%%%

//// For e' il ciclo che viene utilizzato maggiormente //// for($nomevariabile=0; $nomevariabile<5; $nomevariabile++){istruzioni ciclo da fare}

//// foreach viene utilizzato quando bisogna utilizzare un ciclo che contiene un array associativo //// % per la sintassi controlla la sezione dedicata agli array %

//// while ha la stessa funziona del for ma utilizza variabili gia esistenti e quindi non e' necessario precisare il valore delle variabili ///
//// while($nomevariabile>5){ciclo} ////


//// il do while a differenza del while ci permette di eseguire il ciclo almeno una volta indipendetemente dalla condizione del while /// 
            $i=5;
            do{
                  echo "numero= " . $i ;
                  $i++; 
            }while($i<5); ////

//// break viene utilizzata per fermare un ciclo a una determinata condizione all'interno del ciclo //// 
//// for($nomevariabile=0; $nomevariabile<5; $nomevariabile++){
                        if($nomevariabile == 3){
                              break;  % in questo modo la lista visualizzata si fermera a 3 %
                        }
                        echo "Numero visualizzato: " . $nomevariabile . "<br>"; 
                        }

//// break viene utilizzata per fermare un ciclo a una determinata condizione all'interno del ciclo //// 
//// for($nomevariabile=0; $nomevariabile<5; $nomevariabile++){
                        if($nomevariabile == 3){
                              continue;  % in questo modo la lista visualizzata saltera il numero 3 %
                        }
                        echo "Numero visualizzato: " . $nomevariabile . "<br>"; 
                        }


//// come integrare il codice php al codice html //// esempio lista: 
                                                                        <ul>
                                                                              <?php for($i=0; $i<5; $i++) : ?> %vengono utilizzati i : quando si ha una sola riga di ciclo
                                                                                    <li> List item <?php echo $i ?> </li>
                                                                                    <?php> endfor; ?> %endfor - endwhile - endforeach viene utilizzato al posto delle parentesi graffe che non sono consentite in html
                                                                        </ul>    ////


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      LE FUNZIONI       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//// Per creare una funzione utilizziamo la parola chiave function ////  function nomeFunzione(){istruzione da eseguire}

//// Per invocare/chiamare e quindi utilizzare una funzione si scrive semplicemente: nomeFunzione(eventuali parametri) ////

//// I parametri di default sono parametri a cui noi assegniamo un valore ma che assumono quel valore solo in mancanza di altri valori al momento della chiamata ////
                  function nomeFunzione($parametro1 , $parametro2 = 10){istruzione da eseguire}
                  nomeFunzione($valore1) % in questo caso il parametro 2 avra' valore 10
                  nomeFunzione($valore1, $valore2) //// % in questo caso il parametro 2 avra' il valore della variabile $valore2

//// Per poter visualizzare il risultato della funzione occorre utilizzare return //// 
                  function nomeFunzione($parametro1 , $parametro2 = 10){istruzione da eseguire; return $nomevariabile} 
                  echo $nomeFunzione(parametri) ////

//// Per poter salvare il risultato di una funzione occorre creare una variabile prima //// 
$primavariabile = valore; $secondavariabile = valore; $nomevariabilesalvataggio= nomeFunzione($primavariabile, $secondavariabile)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%   LE DATE   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


//// UNIX Timestamp che parte dal 1 Gennaio 1970  00:00:00 GMT (Greanwitch Mean Time)  //// tutti i computer iniziano a contare il tempo utilizzando questo Timestamp

//// date($formato, $Timestamp) converte il Timestamp in formato leggibile ////
i due parametri di date sono formato e timestamp $data = date('d/m/Y' , timestamp) % ovviamento il timestamp sara' in formato numerico %

/// i parametri da utilizzare nel formato sono : 

            d - numero del giorno
            D - nome del giorno abbreviato
            l - nome completo 
            m - numero del mese
            M - nome del mese 
            y - anno con le ultime due cifre finali (96 , 98 , 04)
            Y - anno completo con 4 cifre 
            h - ore in formato da 12
            H - ore in formato da 24
            i - minuti
            s - secondi
            a - am  e pm in minuscolo
            A - AM e PM in maiuscolo
% inoltre il formato puo' essere scritto con / , - , . %

/// time() viene utilizzare per avere il timestamp corrente e quindi la data in tempo reale //// $data = date('d/m/Y H:i:s' , time())

/// per ottenere il timestamp di una determinata data si utilizza mktime(ore, minuti, secondi, mese, giorno, anno) ////

//// strtotime invece viene utilizzato per ottenere il timestamp da una data senza dover indicare tutti i parametri,
 oppure per avere il timestamp senza precisare nulla basta utilizzare il parametro now/yesterday/tomorrow oltre a poter eseguire delle operazioni del tipo +7 days ecc../// 
strtotime('26-09-2022') % ovviamente in questo modo da per scontato che sia mezzanotte &
strtotime('now')
strtotime("now" . " +7 days")




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         INCLUDERE FILE ESTERNI E PULIRE IL CODICE       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      

/// Per collegare una pagina ad un'altra si utilizza require 'nomefiledacollegare.php'; oppure include allo stesso modo /// 
esempio pagina html: <?php require 'nomefiledacollegare.php'; ?>
$///  IMPORTANTISSIMO!! ... Grazie a require e include possiamo includere anche pezzi di file html senza dover riscrivere ogni volta lo stesso pezzo di codice ///
esempio pratico: (CREAZIONE FILE HTML:   <nav>
                                                <ul>
                                                      <li><a href="esempiopagina1.php">Home</a></li>
                                                      <li><a href="esempiopagina2.php">Contatti</a></li>
                                                      <li><a href="esempiopagina3.php">Lavora con noi</a></li>
                                                </ul>
                                          </nav>)

                  (PAGINA PHP:            <html> doctype ecc..
                                                <head> contenuto head </head>
                                                      <body>
                                                            <?php include 'nomepaginahtml'; ?> %%% a questo punto verra' visualizzato il contenuto (menu) della pagina html %%%
                                                      </body>
                                          </html> /////


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      REGEX         %%%%%%%%%%%%%%%%%%%%%%%%% link utile per la documentazione: https://www.tutorialrepublic.com/php-tutorial/php-regular-expressions.php

//// Le REGEX anche dette regular exprection sono delle regole con una sintassi particolare che vanno a controllare i pattern(stringhe) ////

//// La sintassi delle regex e' composta da:  . , * , ? , + , [ , ] , ( , ) , { , } , ^ , | , \ , $ ////  consultare link per ulteriori informazioni

//// per creare una regex semplice, quindi un match(ricerca) utilizziamo preg_match //// 
                                                                  $testo = "Oggi e' una bellissima giornata ma il meteo portava vento";
                                                                  $pattern = "/Og[gk]i";  % In questo modo va a cercare all'interno del testo una parola che inizia con Og , ha come terza lettera una g o k, e finisce con i %
                                                                  if (preg_match($pattern, $testo)) % $pattern = "/Og[^gk]i"; invece consiste nella la negazione.
                                                                  {
                                                                        echo "Match trovato";
                                                                        }
                                                                   else
                                                                  {
                                                                              echo "Match non trovato";
                                                                  }

//// Le classi di carattere vengono create con [ ] , un match con [abc] , un match con negazione [^abc] , oppure un match numerico [0-9] //// guarda esempio su 
% mettendo il trattino - indichiamo tutti i numeri da 0 a 9[0-9] , dalla a alla z [a-z] ecc.... %
% per comprendere anche il case sensitive bisogna usare [a-Z] in modo da considerare tutto l'alfabeto minuscolo + quello maiuscolo %
% infine per comprendere tutti i  caratteri sia numerici che non bisogna fare [a-z0-9] %

//// troviamo preg_match_all quando si ha intenzione di fare una ricerca legata a piu' caratteri //// 
                              $matches = preg_match_all($pattern, $testo, $array);
                                    echo $matches . "match sono stati trovati"; % qui stampera' il numero di match trovati. 

//// le classi predefinite sono classi gia' formate ad esempio per fare un match da 0 a 9 invece di fare cosi [0-9] si usa \d , per cercare tutti i caratteri \w /// 
consultare link per visualizzare tutte le classi predefinite //// 
                                                                  $testo = "logo immagine nera.png";
                                                                  $pattern = "/\s/"; % la \s come classe predefinita sostituisce gli spazi vuoti con dei caratteri, quindi in questo caso inserira' _ negli spazi vuoti
                                                                  $replacement = "_"
                                                                  echo (preg_replacement($pattern, $replacement, $testo))

//// I quantificatori invece ci permettono di fare una ricerca piu' ampia, cercando anche piu' di un solo carattere alla volta //// % per tutti i comandi consultare il link %

                                                                              $pattern = "/[\s,]+/";
                                                                              $testo = "My favorite colors is green, blu and red";
                                                                              $parts = preg_split($pattern, $testo);
                                                                              foreach($parts as $part){
                                                                                    echo $part . "<br>";
                                                                              }

//// Le ancore vengono utilizzate per cercare parole partendo dalle iniziali o dalle lettere finali ^(lettera) per le iniziali , (lettera)$ per le finali ////
                                                                                    $pattern = "/^A/"; %Tutte le parole che iniziano con A
                                                                                    $pattern = "/A$/"; %Tutte le parole che finiscono con A

//// i modificatori di pattern sono utilizzati per aggiungere ulteriori istruzioni alla ricerca,
 come per esempio i, che sta ad indicare che la ricerca diventa insensitive, cioe' che non fa distinzione tra minuscolo e maiuscolo ////
                                           $pattern = "/^A/i";  % per tutti i modificatori consultare il link %


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%          FORM, GET E POST         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//// Per creare una schermata di login/registrazione e' necessario creare un form //// 
parte da utilizzare in HTML : 
                              <form action="nomepaginadamandare.php"  method="POST"> % o se si vuole utilizzare GET, method="GET" %
                               <label for="nome">Nome</label>
                               <input type="text" name="nome" id="nome">   
                               <label for="cognome">Cognome</label>
                               <input type="text" name="cognome" id="cognome">     
                              </form>      

//// per inviare i dati non sensibili di un form a un'altra pagina si utilizza GET (le stringhe inviate con GET verranno visualizzate nell'url) ////
                                                            $nome = $_GET["nome"];
                                                            $cognome = $_GET["cognome"]; % in alternativa $_POST se si vuole utilizzare POST

//// per inviare i dati sensibili di un form a un'altra pagina si utilizza POST (le stringhe inviate con POST non verranno visualizzate nell'url) ////

//// con required si indicano i campi obbligatori //// 
                                                      <form action="nomepaginadamandare.php"  method="POST"> 
                                                      <label for="nome">Nome</label>
                                                      <input type="text" name="nome" id="nome" required>   
                                                      <label for="cognome">Cognome</label>
                                                      <input type="text" name="cognome" id="cognome" required>     
                                                      </form>

$ /// IN ATTESA DI AGGIORNAMENTO SUCCESSIVAMENTE CON MYSQL (VALIDAZIONE, REGISTRAZIONE ECC...) ///


$ %%%%%%%%%%%%%%%%%%%%%%%%%%%       LAVORARE CON I FILE           %%%%%%%%%%%%%%%%%%%%%%%%%%% % https://www.tutorialrepublic.com/php-tutorial/php-file-system.php ////

//// Per aprire un file con php si utilizza fopen //// $file = "esempio.txt"
                                                      $ref = fopen($file,"r") 

/// r indica read quindi aprira' il file in sola lettura (solo con file esistenti) ///
/// r+ aprira il file in lettura e scrittura (solo con file esistenti) ///
/// w aprira' il file in sola lettura e pulisce il contenuto (se non esiste lo crea) ///
/// w+ aprira' il file in lettura e scrittura e pulisce il contenuto (se non esiste lo crea) ///
/// a aprira' il file in sola lettura e attacca sotto il contenuto quindi senza cancellarlo (se non esiste lo crea) ///
/// a+ aprira' il file in lettura e scrittura e attacca sotto il contenuto aggiuntivo quindi senza cancellarlo (se non esiste lo crea) ///
/// x serve a creare un nuovo file e a scrivere. Se esiste ci manda un errore ///
/// x+ serve a creare un nuovo file e leggere e scrivere. Se esiste ci manda un errore  ////

/// fare il controllo di un file (check) per evitare errori (solo con r e x) ///   $file = "esempio.txt"
                                                                  if(file_exist($file)){
                                                                        $ref = fopen($file,"r")
                                                                  }
                                                                  else{
                                                                        echo "il file non esiste" ;
                                                                  }

/// per chiudere un file si utilizza fclose /// fclose($ref);

/// per leggere un file si utilizza fread ($file, "quantoleggere"), oppure readfile($file) oppure ancora file_get_content($file) ///
% con fread utilizzando filesize al posto della quantita da leggere, legge tutto il contenuto
            $variabilecasuale= fread ($file, "quantoleggere");
            echo $variabilecasuale; %per poter visualizzare il contenuto del file 

/// per scrivere in un file fwrite ($file, "datidascrivere") % o comunque nome della variabile che contiene il testo da aggiungere
                                                            $file = "esempio.txt";
                                                            $testo = "testo casuale";
                                                                  if(file_exist($file)){
                                                                        $ref = fopen($file,"w");

                                                                        fwrite($file, $testo); % in questo modo, cancelliamo il contenuto dle file, e lo sostituiamo con il contenuto di $testo
                                                                        fclose($file);
                                                                  }
                                                                  else{
                                                                        echo "il file non esiste" ;
                                                                  }

/// per rinominare un file utilizziamo rename /// rename($nomefile, "nuovonome.txt");

/// per rimuovere un file usiamo unlink /// unlink($nomefile);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         GESTIONE CARTELLE        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/// Per creare una nuova cartella directory si usa mkdir() /// 
                                          $Cartella_nuova = "nome_cartella";
                                          if(!file_exists($Cartella_nuova)){
                                                mkdir($Cartella_nuova);
                                          }else{
                                                echo "La cartella esiste gia"
                                          }


/// Copiare un file da un posto all'altro con copy() /// copy($nomefiledacopiare, $nuovofile);

/// Mostrare tutto il contenuto di una cartella scandir() /// $nomevariabilecasuale = scandir($cartella)

/// Mostrare tutti i file di un certo tipo glob() ///


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        COOKIE       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

$ ///  I cookie sono dei file di testo che servono a salvare le preferenze del sito in futuro, 
per esempio per salvare un impostazione specifica in modo che al prossimo accesso possa l'impostazione possa essere gia' attiva ///

/// Per inserire i cookie si utilizza setcookie("nomecookie", "valorecookie", scadenzacookie) $/// 
setcookie("username","Santopav", time()+60*60*24*30); % l'ultimo parametro e' il timestamp cioe' il cookie verra' memorizzato per 30 giorni. %

/// Per accedere ai cookie salvati si usa la variabile globale $_COOKIE["nomecookie"]; /// 
echo $_COOKIE["nomecookie"]; % se il cookie non esiste manda un errore %

/// Per rimuovere un cookie e' sufficente fare setcookie("nomecookie", "", time()-3600); ///


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%             SESSIONI          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/// Le sessioni sono dei dati temporanei salvati sul server (simili ai cookie) 
vengono utilizzate frequentemente per esempio per il tasto "rimani collegato" nei form di login ///

/// Per iniziare una sessione session_start(); /// 

/// per salvare e accedere ai dati della sessione si utilizza la varibile globale $_SESSION["nomevariabile"] = "santopav"; ///
per accedere basta utilizzare echo $_SESSION["nomevariabile"];

/// per rimuovere i dati dalla sessione si utilizza unset ($_SESSION["nomevariabile"]); ///

/// per distruggere/chiudere la sessione si usa session_destroy(); ///